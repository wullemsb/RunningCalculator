{"Name":"Azure Mobile Services","Id":226,"Alias":"azure-mobile-services","Description":"##Data\nMobile Services gives you an easy way to store data in the cloud.  \n\nWhen you create a new Mobile Service, you\u0027ll be prompted to either create a new SQL database or connect to an existing one.  To reduce latency, be sure to deploy your Mobile Service and SQL database to the same data center.\n\n\n\n\n\nOnce you\u0027ve either created a new SQL database for your Mobile Service or connected your Mobile Service to an database, declare your data in your app and insert it using the following syntax:\n\n```csharp\npublic class Item {\n\tpublic int Id { get; set; }\n\tpublic string Text { get; set; }\n}\n\nItem item = new Item { Text = \"Awesome item\" };\nApp.MobileService.GetTable\u003cItem\u003e().InsertAsync (item)\n\t.ContinueWith (t =\u003e { /* success or failure */});\n```\n\nThen use familiar LINQ syntax to query data.\n\nYou can find the full Getting Started with Data tutorial [here](http://go.microsoft.com/fwlink/?LinkId=282375).\n\n##Auth\nYou can authenticate users through their Facebook, Twitter, Microsoft, or Google credentials. (A single Mobile Service can simultaneously support multiple forms of identity so you can of course offer your users a choice of how to login.) \n\nCopy the Client ID and Client  Secret to the appropriate place in the Identity tab. \n\n\n\nTo allow your users to login with their Facebook credentials, for example, you\u0027d use this code: \n\n```csharp\nApp.MobileService.LoginAsync (MobileServiceAuthenticationProvider.Facebook)\n\t.ContinueWith (t =\u003e { /* t.Result is user */ });\n```\n\nYou can find the full Getting Started with Authentication tutorial [here](http://go.microsoft.com/fwlink/?LinkId=282376).\n\n##Push\nTo send push notifications, upload your developer certificate under the authentication tab in the Windows Azure portal.\n\n\n\nMobile Services allows you to easily send push notifications via Apple Push Notification Services (APNS)\n\n```js\npush.apns.send (devicetoken, { alert: \"Hello to Apple World from Mobile Services!\"});\n```\n\nYou can find the full Getting Started with Push Notifications tutorial [here](http://go.microsoft.com/fwlink/?LinkId=282377).\n\n##Scripts\nMobile Services allows you to add business logic to CRUD operations through secure server-side scripts.  Currently, server-side scripts must be written in JavaScript even though client side code is written in C#.\n\nTo add a script, navigate to the \u0027DATA\u0027 tab on the dashbaord and select a table.\n\n\n\nThen, under the \u0027SCRIPT\u0027 tab, choose either Insert, Update, Delete, or Read from the dropdown menu and copy in your script.  You can find samples for common scripts at http://msdn.microsoft.com/en-us/library/windowsazure/jj591477.aspx.\n\nLearn how to validate data with scripts [here](http://go.microsoft.com/fwlink/?LinkId=282378) and how to authenticate users with scripts [here](http://go.microsoft.com/fwlink/?LinkId=282379).\n\n\n\nIf you\u0027d like to schedule a script to run periodically (rather than when triggerd by a particular event), visit the \u0027SCHEDULER\u0027 tab on the main dashboard and click \u0027Create a Scheduled Job.\u0027  Then, set the interval at which you would like the script to run.\n\n\n\nOnce you write the script, click \u0027Save\u0027 then \u0027Run Once.\u0027  Check the \u0027LOGS\u0027 tab on the main dashboard for any errors.  If you\u0027re error-free, be sure to return to the \u0027SCHEDULER\u0027 tab and click \u0027Enable.\u0027\n\nYou can find the full tutorial for scheduling recurring jobs [here]( http://go.microsoft.com/fwlink/?LinkId=282380).\n\n\nTo learn about more Mobile Services, visit the [Windows Azure Mobile Developer Center](https://www.windowsazure.com/en-us/develop/mobile/).\n\n","Version":"1.0.4","Summary":"Store data in the cloud, authenticate users, and send push notifications.","QuickStart":"##Getting Started\n\nMobile Services offers an easy way to store data in the cloud, authenticate users, and send push notifications.\n\n\nTo use Mobile Services with your iOS app, you will need a Windows Azure account.  If you already have an account, login to the [Windows Azure management portal](https://manage.windowsazure.com/).  If you are new to Windows Azure, you can sign up for a 90-day free trial [here](https://www.windowsazure.com/en-us/pricing/free-trial/).\n\nTo create a new Mobile Service after you\u0027ve logged into the [management portal](https://manage.windowsazure.com/), select \u0027New\u0027 --\u003e \u0027Compute\u0027 --\u003e \u0027Mobile Service\u0027 --\u003e \u0027Create.\u0027  \n\n\n\nEven though you will write the majority of your application in your preferred IDE, the management portal provides an easy way to work with three key Mobile Services features: storing data in the cloud, settuing up user authentication via third party services like Facebook, and sending push notifications.\n\nYou can find the full Getting Started with Mobile Services tutorial [here]( http://go.microsoft.com/fwlink/?LinkId=282374).\n\n## Connect a Mobile Service to your Xamarin app\n\nAfter you\u0027ve created a Mobile Service, use the following to connect your project:\n\n```csharp\nusing Microsoft.WindowsAzure.MobileServices;\n...\n\npublic static MobileServiceClient MobileService = new MobileServiceClient(\n\"https://yourMobileServiceName.azure-mobile.net/\", \n\"YOUR_APPLICATION_KEY\"\n);\n```\n\nYou can find value of your Mobile Service URL on the right-hand side of Dashboard and the value of your app key by clicking \u0027Manage Keys\u0027 at the bottom of the Dashboard.\n\n\n\n##Store Data in the Cloud\n\nWhen you create a Mobile Service, you\u0027ll be prompted to either create a new SQL database for that Mobile Service or connect your Mobile Service to an existing one. \n\nYou then add a table to that SQL database by going to the \u0027Data\u0027 tab and hitting \u0027Create.\u0027\n\n\n\nYou\u0027ll then be prompted to set permissions for the table.\n\n\n\nTo store data in that table, use the following code snippet (originally from the [September 2012 announcement](http://blog.xamarin.com/xamarin-partners-with-microsoft-to-support-azure-mobile-services-on-android-and-ios/) of the Xamarin and Windows Azure partnership):\n\n```csharp \npublic class TodoItem\n{\n\tpublic int Id { get; set; }\n\t[DataMember (Name = \"text\")]\n\tpublic string Text { get; set; }\n\t[DataMember (Name = \"complete\")]\n\tpublic bool Complete { get; set; }\n}\n\n...\n\nthis.table = MobileService.GetTable\u003cTodoItem\u003e();\nthis.table.Where (ti =\u003e !ti.Complete).ToListAsync()\n\t.ContinueWith (t =\u003e { this.items = t.Result; }, scheduler);\n```\n\n### Documentation\n\n- Tutorials: https://www.windowsazure.com/en-us/develop/mobile/resources/\n- Developer Center: http://www.windowsazure.com/mobile\n- API Library: http://msdn.microsoft.com/en-us/library/windowsazure/jj710108.aspx\n- Mobile Services GitHub Repo: https://github.com/WindowsAzure/azure-mobile-services\n- Xamarin Mobile Services client framework GitHub Repo: https://github.com/xamarin/azure-mobile-services\n\n### Contact\n\n- Developer Forum: http://social.msdn.microsoft.com/Forums/en-US/azuremobile/threads\n- Feature Requests: http://mobileservices.uservoice.com\n- Contact: mobileservices@microsoft.com\n- Twitter: @joshtwist @cloudnick @chrisrisner @mlunes90\n\n###Legal \n\n- Terms & Conditions: http://www.windowsazure.com/en-us/support/legal/\n","Hash":"6ac481a29abc3d2b6ca216dd2d27c123","TargetPlatforms":["ios","android"],"TrialHash":null}